/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import { AxiosRequestConfig } from "axios";
import {
  AssetApi,
  AssetCategoryApi,
  AssetConditionApi,
  AssetTypeApi,
  AttendanceApi,
  AttendanceCaptureSchemeApi,
  AuthenticationApi,
  BadgeApi,
  ClientsApi,
  CurrencyApi,
  DepartmentsApi,
  EmployeesApi,
  ExpenseApi,
  ExpenseCategoryApi,
  ExpensePolicyApi,
  GoalApi,
  GroupsApi,
  HolidayCalendarApi,
  JobTitleApi,
  JobsApi,
  LeaveBalanceApi,
  LeaveRequestsApi,
  LeaveTypesApi,
  LocationsApi,
  NoticePeriodApi,
  PayBandsApi,
  PayCyclesApi,
  PayGradesApi,
  PayGroupsApi,
  PraiseApi,
  ProjectPhasesApi,
  ProjectsApi,
  RequisitionRequestApi,
  SalaryComponentsApi,
  TalentPoolApi,
  TasksApi,
  TimeFramesApi,
  TimesheetEntriesApi,
} from "./api";
import { Configuration, ConfigurationParameters } from "./configuration";
import { KekaHrCustom } from "./client-custom";

export class KekaHr extends KekaHrCustom {
  readonly asset: AssetApi;
  readonly assetCategory: AssetCategoryApi;
  readonly assetCondition: AssetConditionApi;
  readonly assetType: AssetTypeApi;
  readonly attendance: AttendanceApi;
  readonly attendanceCaptureScheme: AttendanceCaptureSchemeApi;
  readonly authentication: AuthenticationApi;
  readonly badge: BadgeApi;
  readonly clients: ClientsApi;
  readonly currency: CurrencyApi;
  readonly departments: DepartmentsApi;
  readonly employees: EmployeesApi;
  readonly expense: ExpenseApi;
  readonly expenseCategory: ExpenseCategoryApi;
  readonly expensePolicy: ExpensePolicyApi;
  readonly goal: GoalApi;
  readonly groups: GroupsApi;
  readonly holidayCalendar: HolidayCalendarApi;
  readonly jobTitle: JobTitleApi;
  readonly jobs: JobsApi;
  readonly leaveBalance: LeaveBalanceApi;
  readonly leaveRequests: LeaveRequestsApi;
  readonly leaveTypes: LeaveTypesApi;
  readonly locations: LocationsApi;
  readonly noticePeriod: NoticePeriodApi;
  readonly payBands: PayBandsApi;
  readonly payCycles: PayCyclesApi;
  readonly payGrades: PayGradesApi;
  readonly payGroups: PayGroupsApi;
  readonly praise: PraiseApi;
  readonly projectPhases: ProjectPhasesApi;
  readonly projects: ProjectsApi;
  readonly requisitionRequest: RequisitionRequestApi;
  readonly salaryComponents: SalaryComponentsApi;
  readonly talentPool: TalentPoolApi;
  readonly tasks: TasksApi;
  readonly timeFrames: TimeFramesApi;
  readonly timesheetEntries: TimesheetEntriesApi;

  constructor(configurationParameters: ConfigurationParameters) {
    super(configurationParameters);
    const configuration = new Configuration(configurationParameters);
    this.asset = new AssetApi(configuration);
    this.assetCategory = new AssetCategoryApi(configuration);
    this.assetCondition = new AssetConditionApi(configuration);
    this.assetType = new AssetTypeApi(configuration);
    this.attendance = new AttendanceApi(configuration);
    this.attendanceCaptureScheme = new AttendanceCaptureSchemeApi(configuration);
    this.authentication = new AuthenticationApi(configuration);
    this.badge = new BadgeApi(configuration);
    this.clients = new ClientsApi(configuration);
    this.currency = new CurrencyApi(configuration);
    this.departments = new DepartmentsApi(configuration);
    this.employees = new EmployeesApi(configuration);
    this.expense = new ExpenseApi(configuration);
    this.expenseCategory = new ExpenseCategoryApi(configuration);
    this.expensePolicy = new ExpensePolicyApi(configuration);
    this.goal = new GoalApi(configuration);
    this.groups = new GroupsApi(configuration);
    this.holidayCalendar = new HolidayCalendarApi(configuration);
    this.jobTitle = new JobTitleApi(configuration);
    this.jobs = new JobsApi(configuration);
    this.leaveBalance = new LeaveBalanceApi(configuration);
    this.leaveRequests = new LeaveRequestsApi(configuration);
    this.leaveTypes = new LeaveTypesApi(configuration);
    this.locations = new LocationsApi(configuration);
    this.noticePeriod = new NoticePeriodApi(configuration);
    this.payBands = new PayBandsApi(configuration);
    this.payCycles = new PayCyclesApi(configuration);
    this.payGrades = new PayGradesApi(configuration);
    this.payGroups = new PayGroupsApi(configuration);
    this.praise = new PraiseApi(configuration);
    this.projectPhases = new ProjectPhasesApi(configuration);
    this.projects = new ProjectsApi(configuration);
    this.requisitionRequest = new RequisitionRequestApi(configuration);
    this.salaryComponents = new SalaryComponentsApi(configuration);
    this.talentPool = new TalentPoolApi(configuration);
    this.tasks = new TasksApi(configuration);
    this.timeFrames = new TimeFramesApi(configuration);
    this.timesheetEntries = new TimesheetEntriesApi(configuration);
  }

}

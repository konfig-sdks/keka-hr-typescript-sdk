/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OkErrorResponse } from '../models';
// @ts-ignore
import { TalentPoolApplicationFieldsDTO } from '../models';
// @ts-ignore
import { TalentPoolCandidateDTO } from '../models';
// @ts-ignore
import { TalentPoolDTO } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TalentPoolApi - axios parameter creator
 * @export
 */
export const TalentPoolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Post a candidate to a specified talent pool
         * @summary Post a candidate to a talent pool
         * @param {string} talentPoolId 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate: async (talentPoolId: string, requestBody: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'talentPoolId' is not null or undefined
            assertParamExists('addCandidate', 'talentPoolId', talentPoolId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addCandidate', 'requestBody', requestBody)
            const localVarPath = `/v1/hire/talentpool/{talentPoolId}/candidate`
                .replace(`{${"talentPoolId"}}`, encodeURIComponent(String(talentPoolId !== undefined ? talentPoolId : `-talentPoolId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/talentpool/{talentPoolId}/candidate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all active talent pools
         * @summary Get all Talent pools
         * @param {string} [lastModified] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/hire/talentpool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/talentpool',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get application fields of a specified talent pool
         * @summary Get Talent pool application fields
         * @param {string} talentPoolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationFields: async (talentPoolId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'talentPoolId' is not null or undefined
            assertParamExists('getApplicationFields', 'talentPoolId', talentPoolId)
            const localVarPath = `/v1/hire/talentpool/{talentPoolId}/applicationfields`
                .replace(`{${"talentPoolId"}}`, encodeURIComponent(String(talentPoolId !== undefined ? talentPoolId : `-talentPoolId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/talentpool/{talentPoolId}/applicationfields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get candidates in a specified talent pool
         * @summary Get Talent pool candidates
         * @param {string} talentPoolId 
         * @param {string} [lastModified] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates: async (talentPoolId: string, lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'talentPoolId' is not null or undefined
            assertParamExists('getCandidates', 'talentPoolId', talentPoolId)
            const localVarPath = `/v1/hire/talentpool/{talentPoolId}/candidates`
                .replace(`{${"talentPoolId"}}`, encodeURIComponent(String(talentPoolId !== undefined ? talentPoolId : `-talentPoolId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/talentpool/{talentPoolId}/candidates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TalentPoolApi - functional programming interface
 * @export
 */
export const TalentPoolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TalentPoolApiAxiosParamCreator(configuration)
    return {
        /**
         * Post a candidate to a specified talent pool
         * @summary Post a candidate to a talent pool
         * @param {TalentPoolApiAddCandidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCandidate(requestParameters: TalentPoolApiAddCandidateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const requestBody: { [key: string]: any; } = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCandidate(requestParameters.talentPoolId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all active talent pools
         * @summary Get all Talent pools
         * @param {TalentPoolApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: TalentPoolApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TalentPoolDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get application fields of a specified talent pool
         * @summary Get Talent pool application fields
         * @param {TalentPoolApiGetApplicationFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationFields(requestParameters: TalentPoolApiGetApplicationFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TalentPoolApplicationFieldsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationFields(requestParameters.talentPoolId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get candidates in a specified talent pool
         * @summary Get Talent pool candidates
         * @param {TalentPoolApiGetCandidatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidates(requestParameters: TalentPoolApiGetCandidatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TalentPoolCandidateDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidates(requestParameters.talentPoolId, requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TalentPoolApi - factory interface
 * @export
 */
export const TalentPoolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TalentPoolApiFp(configuration)
    return {
        /**
         * Post a candidate to a specified talent pool
         * @summary Post a candidate to a talent pool
         * @param {TalentPoolApiAddCandidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate(requestParameters: TalentPoolApiAddCandidateRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addCandidate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all active talent pools
         * @summary Get all Talent pools
         * @param {TalentPoolApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: TalentPoolApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<TalentPoolDTO>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get application fields of a specified talent pool
         * @summary Get Talent pool application fields
         * @param {TalentPoolApiGetApplicationFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationFields(requestParameters: TalentPoolApiGetApplicationFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TalentPoolApplicationFieldsDTO>> {
            return localVarFp.getApplicationFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get candidates in a specified talent pool
         * @summary Get Talent pool candidates
         * @param {TalentPoolApiGetCandidatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(requestParameters: TalentPoolApiGetCandidatesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TalentPoolCandidateDTO>> {
            return localVarFp.getCandidates(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCandidate operation in TalentPoolApi.
 * @export
 * @interface TalentPoolApiAddCandidateRequest
 */
export type TalentPoolApiAddCandidateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TalentPoolApiAddCandidate
    */
    readonly talentPoolId: string
    
} & { [key: string]: any; }

/**
 * Request parameters for getAll operation in TalentPoolApi.
 * @export
 * @interface TalentPoolApiGetAllRequest
 */
export type TalentPoolApiGetAllRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TalentPoolApiGetAll
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof TalentPoolApiGetAll
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof TalentPoolApiGetAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getApplicationFields operation in TalentPoolApi.
 * @export
 * @interface TalentPoolApiGetApplicationFieldsRequest
 */
export type TalentPoolApiGetApplicationFieldsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TalentPoolApiGetApplicationFields
    */
    readonly talentPoolId: string
    
}

/**
 * Request parameters for getCandidates operation in TalentPoolApi.
 * @export
 * @interface TalentPoolApiGetCandidatesRequest
 */
export type TalentPoolApiGetCandidatesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TalentPoolApiGetCandidates
    */
    readonly talentPoolId: string
    
    /**
    * 
    * @type {string}
    * @memberof TalentPoolApiGetCandidates
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof TalentPoolApiGetCandidates
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof TalentPoolApiGetCandidates
    */
    readonly pageSize?: number
    
}

/**
 * TalentPoolApiGenerated - object-oriented interface
 * @export
 * @class TalentPoolApiGenerated
 * @extends {BaseAPI}
 */
export class TalentPoolApiGenerated extends BaseAPI {
    /**
     * Post a candidate to a specified talent pool
     * @summary Post a candidate to a talent pool
     * @param {TalentPoolApiAddCandidateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentPoolApiGenerated
     */
    public addCandidate(requestParameters: TalentPoolApiAddCandidateRequest, options?: AxiosRequestConfig) {
        return TalentPoolApiFp(this.configuration).addCandidate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all active talent pools
     * @summary Get all Talent pools
     * @param {TalentPoolApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentPoolApiGenerated
     */
    public getAll(requestParameters: TalentPoolApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return TalentPoolApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get application fields of a specified talent pool
     * @summary Get Talent pool application fields
     * @param {TalentPoolApiGetApplicationFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentPoolApiGenerated
     */
    public getApplicationFields(requestParameters: TalentPoolApiGetApplicationFieldsRequest, options?: AxiosRequestConfig) {
        return TalentPoolApiFp(this.configuration).getApplicationFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get candidates in a specified talent pool
     * @summary Get Talent pool candidates
     * @param {TalentPoolApiGetCandidatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentPoolApiGenerated
     */
    public getCandidates(requestParameters: TalentPoolApiGetCandidatesRequest, options?: AxiosRequestConfig) {
        return TalentPoolApiFp(this.configuration).getCandidates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

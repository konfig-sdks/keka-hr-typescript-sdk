/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationGetAccessToken400Response } from '../models';
// @ts-ignore
import { AuthenticationGetAccessTokenRequest } from '../models';
// @ts-ignore
import { AuthenticationGetAccessTokenResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to fetch access token by passing authentication parameters ( grant_type, scope, client_id, client_secret, api_key) as form-url encoded in the body.
         * @summary Generate Access Token
         * @param {string} grantType 
         * @param {string} scope 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} apiKey 
         * @param {AuthenticationGetAccessTokenRequest} [authenticationGetAccessTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken: async (grantType: string, scope: string, clientId: string, clientSecret: string, apiKey: string, authenticationGetAccessTokenRequest?: AuthenticationGetAccessTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('getAccessToken', 'grantType', grantType)
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('getAccessToken', 'scope', scope)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getAccessToken', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('getAccessToken', 'clientSecret', clientSecret)
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getAccessToken', 'apiKey', apiKey)
            const localVarPath = `/connect/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (grantType !== undefined) {
                await addFormParam('grant_type', grantType, false, true)
            }
    
            if (scope !== undefined) {
                await addFormParam('scope', scope, false, true)
            }
    
            if (clientId !== undefined) {
                await addFormParam('client_id', clientId, false, true)
            }
    
            if (clientSecret !== undefined) {
                await addFormParam('client_secret', clientSecret, false, true)
            }
    
            if (apiKey !== undefined) {
                await addFormParam('api_key', apiKey, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationGetAccessTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationGetAccessTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to fetch access token by passing authentication parameters ( grant_type, scope, client_id, client_secret, api_key) as form-url encoded in the body.
         * @summary Generate Access Token
         * @param {AuthenticationApiGetAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessToken(requestParameters: AuthenticationApiGetAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationGetAccessTokenResponse>> {
            const authenticationGetAccessTokenRequest: AuthenticationGetAccessTokenRequest = {
                grant_type: requestParameters.grant_type,
                scope: requestParameters.scope,
                client_id: requestParameters.client_id,
                client_secret: requestParameters.client_secret,
                api_key: requestParameters.api_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessToken(requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, requestParameters.apiKey, authenticationGetAccessTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Use this API to fetch access token by passing authentication parameters ( grant_type, scope, client_id, client_secret, api_key) as form-url encoded in the body.
         * @summary Generate Access Token
         * @param {AuthenticationApiGetAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken(requestParameters: AuthenticationApiGetAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AuthenticationGetAccessTokenResponse> {
            return localVarFp.getAccessToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccessToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetAccessTokenRequest
 */
export type AuthenticationApiGetAccessTokenRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGetAccessToken
    */
    readonly grantType: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGetAccessToken
    */
    readonly scope: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGetAccessToken
    */
    readonly clientId: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGetAccessToken
    */
    readonly clientSecret: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiGetAccessToken
    */
    readonly apiKey: string
    
} & AuthenticationGetAccessTokenRequest

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * Use this API to fetch access token by passing authentication parameters ( grant_type, scope, client_id, client_secret, api_key) as form-url encoded in the body.
     * @summary Generate Access Token
     * @param {AuthenticationApiGetAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public getAccessToken(requestParameters: AuthenticationApiGetAccessTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getAccessToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

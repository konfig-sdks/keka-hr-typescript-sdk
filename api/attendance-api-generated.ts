/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttendanceSummaryPagedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AttendanceApi - axios parameter creator
 * @export
 */
export const AttendanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets all Attendance records between date range `from` and `to`.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get all Attendance Records
         * @param {string} [employeeIds] Comma separated list of one or more Employee ids you\&#39;d like to filter on.
         * @param {string} [from] Date from records to retrieve. If not specified defaults to &#x60;to - 30&#x60; days.
         * @param {string} [to] Date to records can be retrieved. If not specified defaults to &#x60;today&#x60;.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordsInRange: async (employeeIds?: string, from?: string, to?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (employeeIds !== undefined) {
                localVarQueryParameter['employeeIds'] = employeeIds;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time/attendance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendanceApi - functional programming interface
 * @export
 */
export const AttendanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets all Attendance records between date range `from` and `to`.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get all Attendance Records
         * @param {AttendanceApiGetRecordsInRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordsInRange(requestParameters: AttendanceApiGetRecordsInRangeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceSummaryPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordsInRange(requestParameters.employeeIds, requestParameters.from, requestParameters.to, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttendanceApi - factory interface
 * @export
 */
export const AttendanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendanceApiFp(configuration)
    return {
        /**
         * Gets all Attendance records between date range `from` and `to`.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get all Attendance Records
         * @param {AttendanceApiGetRecordsInRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordsInRange(requestParameters: AttendanceApiGetRecordsInRangeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AttendanceSummaryPagedResponse> {
            return localVarFp.getRecordsInRange(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRecordsInRange operation in AttendanceApi.
 * @export
 * @interface AttendanceApiGetRecordsInRangeRequest
 */
export type AttendanceApiGetRecordsInRangeRequest = {
    
    /**
    * Comma separated list of one or more Employee ids you\'d like to filter on.
    * @type {string}
    * @memberof AttendanceApiGetRecordsInRange
    */
    readonly employeeIds?: string
    
    /**
    * Date from records to retrieve. If not specified defaults to `to - 30` days.
    * @type {string}
    * @memberof AttendanceApiGetRecordsInRange
    */
    readonly from?: string
    
    /**
    * Date to records can be retrieved. If not specified defaults to `today`.
    * @type {string}
    * @memberof AttendanceApiGetRecordsInRange
    */
    readonly to?: string
    
    /**
    * 
    * @type {number}
    * @memberof AttendanceApiGetRecordsInRange
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof AttendanceApiGetRecordsInRange
    */
    readonly pageSize?: number
    
}

/**
 * AttendanceApiGenerated - object-oriented interface
 * @export
 * @class AttendanceApiGenerated
 * @extends {BaseAPI}
 */
export class AttendanceApiGenerated extends BaseAPI {
    /**
     * Gets all Attendance records between date range `from` and `to`.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
     * @summary Get all Attendance Records
     * @param {AttendanceApiGetRecordsInRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApiGenerated
     */
    public getRecordsInRange(requestParameters: AttendanceApiGetRecordsInRangeRequest = {}, options?: AxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).getRecordsInRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIPraisePagedResponse } from '../models';
// @ts-ignore
import { AddPraise } from '../models';
// @ts-ignore
import { StringResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PraiseApi - axios parameter creator
 * @export
 */
export const PraiseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an praise and returns created praise identifier.
         * @summary Add Praise
         * @param {AddPraise} [addPraise] The praise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPraiseIdentifier: async (addPraise?: AddPraise, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pms/praise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addPraise,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pms/praise',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addPraise, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all employees praises
         * @summary Gets praise list.
         * @param {string} [praiseIds] Comma separated list of one or more praise ids you\&#39;d like to filter on.
         * @param {string} [from] Date/time from records to retrieve, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified defaults to &#x60;to - 30&#x60; days.
         * @param {string} [to] Date/time to records to retrieve, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified defaults to &#x60;today&#x60;.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeesPraises: async (praiseIds?: string, from?: string, to?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pms/praise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (praiseIds !== undefined) {
                localVarQueryParameter['praiseIds'] = praiseIds;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pms/praise',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PraiseApi - functional programming interface
 * @export
 */
export const PraiseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PraiseApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an praise and returns created praise identifier.
         * @summary Add Praise
         * @param {PraiseApiCreatePraiseIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPraiseIdentifier(requestParameters: PraiseApiCreatePraiseIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponse>> {
            const addPraise: AddPraise = {
                employeeIds: requestParameters.employeeIds,
                feedback: requestParameters.feedback,
                badgeId: requestParameters.badgeId,
                givenBy: requestParameters.givenBy
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPraiseIdentifier(addPraise, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all employees praises
         * @summary Gets praise list.
         * @param {PraiseApiListEmployeesPraisesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeesPraises(requestParameters: PraiseApiListEmployeesPraisesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIPraisePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeesPraises(requestParameters.praiseIds, requestParameters.from, requestParameters.to, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PraiseApi - factory interface
 * @export
 */
export const PraiseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PraiseApiFp(configuration)
    return {
        /**
         * Add an praise and returns created praise identifier.
         * @summary Add Praise
         * @param {PraiseApiCreatePraiseIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPraiseIdentifier(requestParameters: PraiseApiCreatePraiseIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<StringResponse> {
            return localVarFp.createPraiseIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all employees praises
         * @summary Gets praise list.
         * @param {PraiseApiListEmployeesPraisesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeesPraises(requestParameters: PraiseApiListEmployeesPraisesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<APIPraisePagedResponse> {
            return localVarFp.listEmployeesPraises(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPraiseIdentifier operation in PraiseApi.
 * @export
 * @interface PraiseApiCreatePraiseIdentifierRequest
 */
export type PraiseApiCreatePraiseIdentifierRequest = {
    
} & AddPraise

/**
 * Request parameters for listEmployeesPraises operation in PraiseApi.
 * @export
 * @interface PraiseApiListEmployeesPraisesRequest
 */
export type PraiseApiListEmployeesPraisesRequest = {
    
    /**
    * Comma separated list of one or more praise ids you\'d like to filter on.
    * @type {string}
    * @memberof PraiseApiListEmployeesPraises
    */
    readonly praiseIds?: string
    
    /**
    * Date/time from records to retrieve, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified defaults to `to - 30` days.
    * @type {string}
    * @memberof PraiseApiListEmployeesPraises
    */
    readonly from?: string
    
    /**
    * Date/time to records to retrieve, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified defaults to `today`.
    * @type {string}
    * @memberof PraiseApiListEmployeesPraises
    */
    readonly to?: string
    
    /**
    * 
    * @type {number}
    * @memberof PraiseApiListEmployeesPraises
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof PraiseApiListEmployeesPraises
    */
    readonly pageSize?: number
    
}

/**
 * PraiseApiGenerated - object-oriented interface
 * @export
 * @class PraiseApiGenerated
 * @extends {BaseAPI}
 */
export class PraiseApiGenerated extends BaseAPI {
    /**
     * Add an praise and returns created praise identifier.
     * @summary Add Praise
     * @param {PraiseApiCreatePraiseIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PraiseApiGenerated
     */
    public createPraiseIdentifier(requestParameters: PraiseApiCreatePraiseIdentifierRequest, options?: AxiosRequestConfig) {
        return PraiseApiFp(this.configuration).createPraiseIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all employees praises
     * @summary Gets praise list.
     * @param {PraiseApiListEmployeesPraisesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PraiseApiGenerated
     */
    public listEmployeesPraises(requestParameters: PraiseApiListEmployeesPraisesRequest = {}, options?: AxiosRequestConfig) {
        return PraiseApiFp(this.configuration).listEmployeesPraises(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectPhasePagedResponse } from '../models';
// @ts-ignore
import { StringResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectPhasesApi - axios parameter creator
 * @export
 */
export const ProjectPhasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Project Phase and returns created phase identifier
         * @summary Create a Project Phase
         * @param {string} projectId The project identifier.
         * @param {string} [phaseName] Name of the phase.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhaseIdentifier: async (projectId: string, phaseName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createPhaseIdentifier', 'projectId', projectId)
            const localVarPath = `/psa/projects/{projectId}/phases`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (phaseName !== undefined) {
                localVarQueryParameter['phaseName'] = phaseName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{projectId}/phases',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get project phases.
         * @summary Get project phases.
         * @param {string} projectId The project identifier.
         * @param {string} [lastModified] Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ssÂ±hh:mm).
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (projectId: string, lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAll', 'projectId', projectId)
            const localVarPath = `/psa/projects/{projectId}/phases`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{projectId}/phases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectPhasesApi - functional programming interface
 * @export
 */
export const ProjectPhasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectPhasesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Project Phase and returns created phase identifier
         * @summary Create a Project Phase
         * @param {ProjectPhasesApiCreatePhaseIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhaseIdentifier(requestParameters: ProjectPhasesApiCreatePhaseIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhaseIdentifier(requestParameters.projectId, requestParameters.phaseName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get project phases.
         * @summary Get project phases.
         * @param {ProjectPhasesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: ProjectPhasesApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectPhasePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.projectId, requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectPhasesApi - factory interface
 * @export
 */
export const ProjectPhasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectPhasesApiFp(configuration)
    return {
        /**
         * Create a Project Phase and returns created phase identifier
         * @summary Create a Project Phase
         * @param {ProjectPhasesApiCreatePhaseIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhaseIdentifier(requestParameters: ProjectPhasesApiCreatePhaseIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<StringResponse> {
            return localVarFp.createPhaseIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get project phases.
         * @summary Get project phases.
         * @param {ProjectPhasesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: ProjectPhasesApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectPhasePagedResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPhaseIdentifier operation in ProjectPhasesApi.
 * @export
 * @interface ProjectPhasesApiCreatePhaseIdentifierRequest
 */
export type ProjectPhasesApiCreatePhaseIdentifierRequest = {
    
    /**
    * The project identifier.
    * @type {string}
    * @memberof ProjectPhasesApiCreatePhaseIdentifier
    */
    readonly projectId: string
    
    /**
    * Name of the phase.
    * @type {string}
    * @memberof ProjectPhasesApiCreatePhaseIdentifier
    */
    readonly phaseName?: string
    
}

/**
 * Request parameters for getAll operation in ProjectPhasesApi.
 * @export
 * @interface ProjectPhasesApiGetAllRequest
 */
export type ProjectPhasesApiGetAllRequest = {
    
    /**
    * The project identifier.
    * @type {string}
    * @memberof ProjectPhasesApiGetAll
    */
    readonly projectId: string
    
    /**
    * Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ssÂ±hh:mm).
    * @type {string}
    * @memberof ProjectPhasesApiGetAll
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof ProjectPhasesApiGetAll
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof ProjectPhasesApiGetAll
    */
    readonly pageSize?: number
    
}

/**
 * ProjectPhasesApiGenerated - object-oriented interface
 * @export
 * @class ProjectPhasesApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectPhasesApiGenerated extends BaseAPI {
    /**
     * Create a Project Phase and returns created phase identifier
     * @summary Create a Project Phase
     * @param {ProjectPhasesApiCreatePhaseIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectPhasesApiGenerated
     */
    public createPhaseIdentifier(requestParameters: ProjectPhasesApiCreatePhaseIdentifierRequest, options?: AxiosRequestConfig) {
        return ProjectPhasesApiFp(this.configuration).createPhaseIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get project phases.
     * @summary Get project phases.
     * @param {ProjectPhasesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectPhasesApiGenerated
     */
    public getAll(requestParameters: ProjectPhasesApiGetAllRequest, options?: AxiosRequestConfig) {
        return ProjectPhasesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

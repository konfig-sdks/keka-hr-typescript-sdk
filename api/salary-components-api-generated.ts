/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APISalaryComponentPagedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SalaryComponentsApi - axios parameter creator
 * @export
 */
export const SalaryComponentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets all the salary components.
         * @summary Get all Salary Components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllComponents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payroll/salarycomponents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/salarycomponents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalaryComponentsApi - functional programming interface
 * @export
 */
export const SalaryComponentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalaryComponentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets all the salary components.
         * @summary Get all Salary Components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllComponents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APISalaryComponentPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllComponents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalaryComponentsApi - factory interface
 * @export
 */
export const SalaryComponentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalaryComponentsApiFp(configuration)
    return {
        /**
         * Gets all the salary components.
         * @summary Get all Salary Components
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllComponents(options?: AxiosRequestConfig): AxiosPromise<APISalaryComponentPagedResponse> {
            return localVarFp.getAllComponents(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalaryComponentsApiGenerated - object-oriented interface
 * @export
 * @class SalaryComponentsApiGenerated
 * @extends {BaseAPI}
 */
export class SalaryComponentsApiGenerated extends BaseAPI {
    /**
     * Gets all the salary components.
     * @summary Get all Salary Components
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryComponentsApiGenerated
     */
    public getAllComponents(options?: AxiosRequestConfig) {
        return SalaryComponentsApiFp(this.configuration).getAllComponents(options).then((request) => request(this.axios, this.basePath));
    }
}

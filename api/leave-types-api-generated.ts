/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeaveTypePagedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeaveTypesApi - axios parameter creator
 * @export
 */
export const LeaveTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Leave Types
         * @summary Get all Leave Types
         * @param {string} [leaveTypeIds] Comma separated list of one or more leave type identifiers you\&#39;d like to filter on..
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (leaveTypeIds?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time/leavetypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (leaveTypeIds !== undefined) {
                localVarQueryParameter['leaveTypeIds'] = leaveTypeIds;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time/leavetypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaveTypesApi - functional programming interface
 * @export
 */
export const LeaveTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaveTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all Leave Types
         * @summary Get all Leave Types
         * @param {LeaveTypesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: LeaveTypesApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveTypePagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.leaveTypeIds, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeaveTypesApi - factory interface
 * @export
 */
export const LeaveTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaveTypesApiFp(configuration)
    return {
        /**
         * Get all Leave Types
         * @summary Get all Leave Types
         * @param {LeaveTypesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: LeaveTypesApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LeaveTypePagedResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listAll operation in LeaveTypesApi.
 * @export
 * @interface LeaveTypesApiListAllRequest
 */
export type LeaveTypesApiListAllRequest = {
    
    /**
    * Comma separated list of one or more leave type identifiers you\'d like to filter on..
    * @type {string}
    * @memberof LeaveTypesApiListAll
    */
    readonly leaveTypeIds?: string
    
    /**
    * 
    * @type {number}
    * @memberof LeaveTypesApiListAll
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof LeaveTypesApiListAll
    */
    readonly pageSize?: number
    
}

/**
 * LeaveTypesApiGenerated - object-oriented interface
 * @export
 * @class LeaveTypesApiGenerated
 * @extends {BaseAPI}
 */
export class LeaveTypesApiGenerated extends BaseAPI {
    /**
     * Get all Leave Types
     * @summary Get all Leave Types
     * @param {LeaveTypesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveTypesApiGenerated
     */
    public listAll(requestParameters: LeaveTypesApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return LeaveTypesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

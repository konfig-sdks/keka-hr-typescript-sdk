/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CandidateNoteDTO } from '../models';
// @ts-ignore
import { InterviewDTO } from '../models';
// @ts-ignore
import { JobApplicationFieldsDTO } from '../models';
// @ts-ignore
import { JobCandidateDetailsDTO } from '../models';
// @ts-ignore
import { JobDTO } from '../models';
// @ts-ignore
import { OkErrorResponse } from '../models';
// @ts-ignore
import { ScoreCardDTO } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updated the candidate
         * @summary Adds candidate note
         * @param {string} candidateId 
         * @param {string} jobId 
         * @param {CandidateNoteDTO} [candidateNoteDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidateNote: async (candidateId: string, jobId: string, candidateNoteDTO?: CandidateNoteDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('addCandidateNote', 'candidateId', candidateId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('addCandidateNote', 'jobId', jobId)
            const localVarPath = `/v1/hire/jobs/{jobId}/candidate/{candidateId}/notes`
                .replace(`{${"candidateId"}}`, encodeURIComponent(String(candidateId !== undefined ? candidateId : `-candidateId-`)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: candidateNoteDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/candidate/{candidateId}/notes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(candidateNoteDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Published, Confidential and Archived jobs
         * @summary Get all jobs
         * @param {string} [lastModified] 
         * @param {number} [jobStatus] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublishedJobs: async (lastModified?: string, jobStatus?: number, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/hire/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (jobStatus !== undefined) {
                localVarQueryParameter['JobStatus'] = jobStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get job application fields
         * @summary Get application fields
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationFields: async (jobId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getApplicationFields', 'jobId', jobId)
            const localVarPath = `/v1/hire/jobs/{jobId}/applicationfields`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/applicationfields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get interview scheduled and completed for a job and a candidate
         * @summary Get interview scheduled and completed for a job candidate
         * @param {string} candidateId 
         * @param {string} jobId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidateInterviews: async (candidateId: string, jobId: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('getCandidateInterviews', 'candidateId', candidateId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getCandidateInterviews', 'jobId', jobId)
            const localVarPath = `/v1/hire/jobs/{jobId}/candidate/{candidateId}/interviews`
                .replace(`{${"candidateId"}}`, encodeURIComponent(String(candidateId !== undefined ? candidateId : `-candidateId-`)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/candidate/{candidateId}/interviews',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the scorecards which are submitted for a specified job candidate
         * @summary Get scorecard of a specified candidate for a job candidate
         * @param {string} candidateId 
         * @param {string} jobId 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidateScorecards: async (candidateId: string, jobId: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('getCandidateScorecards', 'candidateId', candidateId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getCandidateScorecards', 'jobId', jobId)
            const localVarPath = `/v1/hire/jobs/{jobId}/candidate/{candidateId}/scorecards`
                .replace(`{${"candidateId"}}`, encodeURIComponent(String(candidateId !== undefined ? candidateId : `-candidateId-`)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/candidate/{candidateId}/scorecards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get active or archived candidates in a specified job
         * @summary Get job candidates
         * @param {string} jobId 
         * @param {boolean} [isArchived] 
         * @param {string} [lastModified] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates: async (jobId: string, isArchived?: boolean, lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getCandidates', 'jobId', jobId)
            const localVarPath = `/v1/hire/jobs/{jobId}/candidates`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (isArchived !== undefined) {
                localVarQueryParameter['isArchived'] = isArchived;
            }

            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/candidates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a candidate to a specified job
         * @summary Post a job candidate
         * @param {string} jobId 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCandidate: async (jobId: string, requestBody: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('postCandidate', 'jobId', jobId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('postCandidate', 'requestBody', requestBody)
            const localVarPath = `/v1/hire/jobs/{jobId}/candidate`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/candidate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updated the candidate
         * @summary Updated a candidate
         * @param {string} candidateId 
         * @param {string} jobId 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCandidate: async (candidateId: string, jobId: string, requestBody: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('updateCandidate', 'candidateId', candidateId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateCandidate', 'jobId', jobId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('updateCandidate', 'requestBody', requestBody)
            const localVarPath = `/v1/hire/jobs/{jobId}/candidate/{candidateId}`
                .replace(`{${"candidateId"}}`, encodeURIComponent(String(candidateId !== undefined ? candidateId : `-candidateId-`)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/hire/jobs/{jobId}/candidate/{candidateId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Updated the candidate
         * @summary Adds candidate note
         * @param {JobsApiAddCandidateNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCandidateNote(requestParameters: JobsApiAddCandidateNoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const candidateNoteDTO: CandidateNoteDTO = {
                tags: requestParameters.tags,
                comments: requestParameters.comments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCandidateNote(requestParameters.candidateId, requestParameters.jobId, candidateNoteDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Published, Confidential and Archived jobs
         * @summary Get all jobs
         * @param {JobsApiGetAllPublishedJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublishedJobs(requestParameters: JobsApiGetAllPublishedJobsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPublishedJobs(requestParameters.lastModified, requestParameters.jobStatus, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get job application fields
         * @summary Get application fields
         * @param {JobsApiGetApplicationFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationFields(requestParameters: JobsApiGetApplicationFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobApplicationFieldsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationFields(requestParameters.jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get interview scheduled and completed for a job and a candidate
         * @summary Get interview scheduled and completed for a job candidate
         * @param {JobsApiGetCandidateInterviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidateInterviews(requestParameters: JobsApiGetCandidateInterviewsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InterviewDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateInterviews(requestParameters.candidateId, requestParameters.jobId, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the scorecards which are submitted for a specified job candidate
         * @summary Get scorecard of a specified candidate for a job candidate
         * @param {JobsApiGetCandidateScorecardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidateScorecards(requestParameters: JobsApiGetCandidateScorecardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScoreCardDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateScorecards(requestParameters.candidateId, requestParameters.jobId, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get active or archived candidates in a specified job
         * @summary Get job candidates
         * @param {JobsApiGetCandidatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandidates(requestParameters: JobsApiGetCandidatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobCandidateDetailsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidates(requestParameters.jobId, requestParameters.isArchived, requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post a candidate to a specified job
         * @summary Post a job candidate
         * @param {JobsApiPostCandidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCandidate(requestParameters: JobsApiPostCandidateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const requestBody: { [key: string]: any; } = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCandidate(requestParameters.jobId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updated the candidate
         * @summary Updated a candidate
         * @param {JobsApiUpdateCandidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCandidate(requestParameters: JobsApiUpdateCandidateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const requestBody: { [key: string]: any; } = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCandidate(requestParameters.candidateId, requestParameters.jobId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * Updated the candidate
         * @summary Adds candidate note
         * @param {JobsApiAddCandidateNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidateNote(requestParameters: JobsApiAddCandidateNoteRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addCandidateNote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Published, Confidential and Archived jobs
         * @summary Get all jobs
         * @param {JobsApiGetAllPublishedJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublishedJobs(requestParameters: JobsApiGetAllPublishedJobsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<JobDTO>> {
            return localVarFp.getAllPublishedJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get job application fields
         * @summary Get application fields
         * @param {JobsApiGetApplicationFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationFields(requestParameters: JobsApiGetApplicationFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<JobApplicationFieldsDTO>> {
            return localVarFp.getApplicationFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get interview scheduled and completed for a job and a candidate
         * @summary Get interview scheduled and completed for a job candidate
         * @param {JobsApiGetCandidateInterviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidateInterviews(requestParameters: JobsApiGetCandidateInterviewsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<InterviewDTO>> {
            return localVarFp.getCandidateInterviews(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the scorecards which are submitted for a specified job candidate
         * @summary Get scorecard of a specified candidate for a job candidate
         * @param {JobsApiGetCandidateScorecardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidateScorecards(requestParameters: JobsApiGetCandidateScorecardsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ScoreCardDTO>> {
            return localVarFp.getCandidateScorecards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get active or archived candidates in a specified job
         * @summary Get job candidates
         * @param {JobsApiGetCandidatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(requestParameters: JobsApiGetCandidatesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<JobCandidateDetailsDTO>> {
            return localVarFp.getCandidates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a candidate to a specified job
         * @summary Post a job candidate
         * @param {JobsApiPostCandidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCandidate(requestParameters: JobsApiPostCandidateRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.postCandidate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updated the candidate
         * @summary Updated a candidate
         * @param {JobsApiUpdateCandidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCandidate(requestParameters: JobsApiUpdateCandidateRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateCandidate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCandidateNote operation in JobsApi.
 * @export
 * @interface JobsApiAddCandidateNoteRequest
 */
export type JobsApiAddCandidateNoteRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiAddCandidateNote
    */
    readonly candidateId: string
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiAddCandidateNote
    */
    readonly jobId: string
    
} & CandidateNoteDTO

/**
 * Request parameters for getAllPublishedJobs operation in JobsApi.
 * @export
 * @interface JobsApiGetAllPublishedJobsRequest
 */
export type JobsApiGetAllPublishedJobsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetAllPublishedJobs
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof JobsApiGetAllPublishedJobs
    */
    readonly jobStatus?: number
    
    /**
    * 
    * @type {number}
    * @memberof JobsApiGetAllPublishedJobs
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof JobsApiGetAllPublishedJobs
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getApplicationFields operation in JobsApi.
 * @export
 * @interface JobsApiGetApplicationFieldsRequest
 */
export type JobsApiGetApplicationFieldsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetApplicationFields
    */
    readonly jobId: string
    
}

/**
 * Request parameters for getCandidateInterviews operation in JobsApi.
 * @export
 * @interface JobsApiGetCandidateInterviewsRequest
 */
export type JobsApiGetCandidateInterviewsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetCandidateInterviews
    */
    readonly candidateId: string
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetCandidateInterviews
    */
    readonly jobId: string
    
    /**
    * 
    * @type {number}
    * @memberof JobsApiGetCandidateInterviews
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof JobsApiGetCandidateInterviews
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getCandidateScorecards operation in JobsApi.
 * @export
 * @interface JobsApiGetCandidateScorecardsRequest
 */
export type JobsApiGetCandidateScorecardsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetCandidateScorecards
    */
    readonly candidateId: string
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetCandidateScorecards
    */
    readonly jobId: string
    
    /**
    * 
    * @type {number}
    * @memberof JobsApiGetCandidateScorecards
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof JobsApiGetCandidateScorecards
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getCandidates operation in JobsApi.
 * @export
 * @interface JobsApiGetCandidatesRequest
 */
export type JobsApiGetCandidatesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetCandidates
    */
    readonly jobId: string
    
    /**
    * 
    * @type {boolean}
    * @memberof JobsApiGetCandidates
    */
    readonly isArchived?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiGetCandidates
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof JobsApiGetCandidates
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof JobsApiGetCandidates
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for postCandidate operation in JobsApi.
 * @export
 * @interface JobsApiPostCandidateRequest
 */
export type JobsApiPostCandidateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiPostCandidate
    */
    readonly jobId: string
    
} & { [key: string]: any; }

/**
 * Request parameters for updateCandidate operation in JobsApi.
 * @export
 * @interface JobsApiUpdateCandidateRequest
 */
export type JobsApiUpdateCandidateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiUpdateCandidate
    */
    readonly candidateId: string
    
    /**
    * 
    * @type {string}
    * @memberof JobsApiUpdateCandidate
    */
    readonly jobId: string
    
} & { [key: string]: any; }

/**
 * JobsApiGenerated - object-oriented interface
 * @export
 * @class JobsApiGenerated
 * @extends {BaseAPI}
 */
export class JobsApiGenerated extends BaseAPI {
    /**
     * Updated the candidate
     * @summary Adds candidate note
     * @param {JobsApiAddCandidateNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public addCandidateNote(requestParameters: JobsApiAddCandidateNoteRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).addCandidateNote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Published, Confidential and Archived jobs
     * @summary Get all jobs
     * @param {JobsApiGetAllPublishedJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public getAllPublishedJobs(requestParameters: JobsApiGetAllPublishedJobsRequest = {}, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getAllPublishedJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get job application fields
     * @summary Get application fields
     * @param {JobsApiGetApplicationFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public getApplicationFields(requestParameters: JobsApiGetApplicationFieldsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getApplicationFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get interview scheduled and completed for a job and a candidate
     * @summary Get interview scheduled and completed for a job candidate
     * @param {JobsApiGetCandidateInterviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public getCandidateInterviews(requestParameters: JobsApiGetCandidateInterviewsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getCandidateInterviews(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the scorecards which are submitted for a specified job candidate
     * @summary Get scorecard of a specified candidate for a job candidate
     * @param {JobsApiGetCandidateScorecardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public getCandidateScorecards(requestParameters: JobsApiGetCandidateScorecardsRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getCandidateScorecards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get active or archived candidates in a specified job
     * @summary Get job candidates
     * @param {JobsApiGetCandidatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public getCandidates(requestParameters: JobsApiGetCandidatesRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).getCandidates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a candidate to a specified job
     * @summary Post a job candidate
     * @param {JobsApiPostCandidateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public postCandidate(requestParameters: JobsApiPostCandidateRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).postCandidate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updated the candidate
     * @summary Updated a candidate
     * @param {JobsApiUpdateCandidateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiGenerated
     */
    public updateCandidate(requestParameters: JobsApiUpdateCandidateRequest, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).updateCandidate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

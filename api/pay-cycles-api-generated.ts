/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIPayCycleViewPagedResponse } from '../models';
// @ts-ignore
import { APIPayRegisterViewPagedResponse } from '../models';
// @ts-ignore
import { BatchPagedResponse } from '../models';
// @ts-ignore
import { BooleanResponse } from '../models';
// @ts-ignore
import { EmployeePaymentPagedResponse } from '../models';
// @ts-ignore
import { PaymentTransaction } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayCyclesApi - axios parameter creator
 * @export
 */
export const PayCyclesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all Pay Cycles
         * @param {string} payGroupId The Pay Group Id
         * @param {string} [runStatus] Comma separated list of one or more run Status you\&#39;d like to filter on, allowed values are Pending, Finalized, Partial.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (payGroupId: string, runStatus?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGroupId' is not null or undefined
            assertParamExists('getAll', 'payGroupId', payGroupId)
            const localVarPath = `/payroll/paygroups/{payGroupId}/paycycles`
                .replace(`{${"payGroupId"}}`, encodeURIComponent(String(payGroupId !== undefined ? payGroupId : `-payGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (runStatus !== undefined) {
                localVarQueryParameter['runStatus'] = runStatus;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/paygroups/{payGroupId}/paycycles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all payments for the specified pay group Id and pay cycle Id and pay batch Id / specified pay group id and pay cycle Id and pay batch Id and payment status filter
         * @summary Get all Batch Payments
         * @param {string} payGroupId The Pay Group Id
         * @param {string} payCycleId The Pay cycle Id
         * @param {string} payBatchId The Pay Batch Id
         * @param {string} [status] Comma separated list of one or more payment Status you\&#39;d like to filter on, allowed values are UnPaid, Paid.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchPayments: async (payGroupId: string, payCycleId: string, payBatchId: string, status?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGroupId' is not null or undefined
            assertParamExists('getBatchPayments', 'payGroupId', payGroupId)
            // verify required parameter 'payCycleId' is not null or undefined
            assertParamExists('getBatchPayments', 'payCycleId', payCycleId)
            // verify required parameter 'payBatchId' is not null or undefined
            assertParamExists('getBatchPayments', 'payBatchId', payBatchId)
            const localVarPath = `/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches/{payBatchId}/payments`
                .replace(`{${"payGroupId"}}`, encodeURIComponent(String(payGroupId !== undefined ? payGroupId : `-payGroupId-`)))
                .replace(`{${"payCycleId"}}`, encodeURIComponent(String(payCycleId !== undefined ? payCycleId : `-payCycleId-`)))
                .replace(`{${"payBatchId"}}`, encodeURIComponent(String(payBatchId !== undefined ? payBatchId : `-payBatchId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches/{payBatchId}/payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Pay Batches
         * @param {string} payGroupId The Pay Group Id
         * @param {string} payCycleId The Pay cycle Id
         * @param {string} [status] Comma separated list of one or more payment Status you\&#39;d like to filter on, allowed values are UnPaid, Paid.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayBatches: async (payGroupId: string, payCycleId: string, status?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGroupId' is not null or undefined
            assertParamExists('getPayBatches', 'payGroupId', payGroupId)
            // verify required parameter 'payCycleId' is not null or undefined
            assertParamExists('getPayBatches', 'payCycleId', payCycleId)
            const localVarPath = `/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches`
                .replace(`{${"payGroupId"}}`, encodeURIComponent(String(payGroupId !== undefined ? payGroupId : `-payGroupId-`)))
                .replace(`{${"payCycleId"}}`, encodeURIComponent(String(payCycleId !== undefined ? payCycleId : `-payCycleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Pay Register
         * @param {string} payGroupId The Pay Group Id
         * @param {string} payCycleId The Pay cycle Id
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayRegister: async (payGroupId: string, payCycleId: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGroupId' is not null or undefined
            assertParamExists('getPayRegister', 'payGroupId', payGroupId)
            // verify required parameter 'payCycleId' is not null or undefined
            assertParamExists('getPayRegister', 'payCycleId', payCycleId)
            const localVarPath = `/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/payregister`
                .replace(`{${"payGroupId"}}`, encodeURIComponent(String(payGroupId !== undefined ? payGroupId : `-payGroupId-`)))
                .replace(`{${"payCycleId"}}`, encodeURIComponent(String(payCycleId !== undefined ? payCycleId : `-payCycleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/payregister',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Payments status.It will allow only 100 bulk transactions from that particular batch.
         * @summary Update the Payments status
         * @param {string} payGroupId The Pay Group Id
         * @param {string} payCycleId The Pay cycle Id
         * @param {string} payBatchId The Pay Batch Id
         * @param {Array<PaymentTransaction>} [paymentTransaction] The Payment Transactions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentsStatus: async (payGroupId: string, payCycleId: string, payBatchId: string, paymentTransaction?: Array<PaymentTransaction>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGroupId' is not null or undefined
            assertParamExists('updatePaymentsStatus', 'payGroupId', payGroupId)
            // verify required parameter 'payCycleId' is not null or undefined
            assertParamExists('updatePaymentsStatus', 'payCycleId', payCycleId)
            // verify required parameter 'payBatchId' is not null or undefined
            assertParamExists('updatePaymentsStatus', 'payBatchId', payBatchId)
            const localVarPath = `/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches/{payBatchId}/payments`
                .replace(`{${"payGroupId"}}`, encodeURIComponent(String(payGroupId !== undefined ? payGroupId : `-payGroupId-`)))
                .replace(`{${"payCycleId"}}`, encodeURIComponent(String(payCycleId !== undefined ? payCycleId : `-payCycleId-`)))
                .replace(`{${"payBatchId"}}`, encodeURIComponent(String(payBatchId !== undefined ? payBatchId : `-payBatchId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentTransaction,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/paygroups/{payGroupId}/paycycles/{payCycleId}/paybatches/{payBatchId}/payments',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentTransaction, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayCyclesApi - functional programming interface
 * @export
 */
export const PayCyclesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayCyclesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all Pay Cycles
         * @param {PayCyclesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: PayCyclesApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIPayCycleViewPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.payGroupId, requestParameters.runStatus, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all payments for the specified pay group Id and pay cycle Id and pay batch Id / specified pay group id and pay cycle Id and pay batch Id and payment status filter
         * @summary Get all Batch Payments
         * @param {PayCyclesApiGetBatchPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchPayments(requestParameters: PayCyclesApiGetBatchPaymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeePaymentPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBatchPayments(requestParameters.payGroupId, requestParameters.payCycleId, requestParameters.payBatchId, requestParameters.status, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Pay Batches
         * @param {PayCyclesApiGetPayBatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayBatches(requestParameters: PayCyclesApiGetPayBatchesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayBatches(requestParameters.payGroupId, requestParameters.payCycleId, requestParameters.status, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Pay Register
         * @param {PayCyclesApiGetPayRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayRegister(requestParameters: PayCyclesApiGetPayRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIPayRegisterViewPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayRegister(requestParameters.payGroupId, requestParameters.payCycleId, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the Payments status.It will allow only 100 bulk transactions from that particular batch.
         * @summary Update the Payments status
         * @param {PayCyclesApiUpdatePaymentsStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentsStatus(requestParameters: PayCyclesApiUpdatePaymentsStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const paymentTransaction: Array<PaymentTransaction> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentsStatus(requestParameters.payGroupId, requestParameters.payCycleId, requestParameters.payBatchId, paymentTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayCyclesApi - factory interface
 * @export
 */
export const PayCyclesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayCyclesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all Pay Cycles
         * @param {PayCyclesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: PayCyclesApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<APIPayCycleViewPagedResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all payments for the specified pay group Id and pay cycle Id and pay batch Id / specified pay group id and pay cycle Id and pay batch Id and payment status filter
         * @summary Get all Batch Payments
         * @param {PayCyclesApiGetBatchPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchPayments(requestParameters: PayCyclesApiGetBatchPaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeePaymentPagedResponse> {
            return localVarFp.getBatchPayments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Pay Batches
         * @param {PayCyclesApiGetPayBatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayBatches(requestParameters: PayCyclesApiGetPayBatchesRequest, options?: AxiosRequestConfig): AxiosPromise<BatchPagedResponse> {
            return localVarFp.getPayBatches(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Pay Register
         * @param {PayCyclesApiGetPayRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayRegister(requestParameters: PayCyclesApiGetPayRegisterRequest, options?: AxiosRequestConfig): AxiosPromise<APIPayRegisterViewPagedResponse> {
            return localVarFp.getPayRegister(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the Payments status.It will allow only 100 bulk transactions from that particular batch.
         * @summary Update the Payments status
         * @param {PayCyclesApiUpdatePaymentsStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentsStatus(requestParameters: PayCyclesApiUpdatePaymentsStatusRequest, options?: AxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.updatePaymentsStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAll operation in PayCyclesApi.
 * @export
 * @interface PayCyclesApiGetAllRequest
 */
export type PayCyclesApiGetAllRequest = {
    
    /**
    * The Pay Group Id
    * @type {string}
    * @memberof PayCyclesApiGetAll
    */
    readonly payGroupId: string
    
    /**
    * Comma separated list of one or more run Status you\'d like to filter on, allowed values are Pending, Finalized, Partial.
    * @type {string}
    * @memberof PayCyclesApiGetAll
    */
    readonly runStatus?: string
    
    /**
    * 
    * @type {number}
    * @memberof PayCyclesApiGetAll
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof PayCyclesApiGetAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getBatchPayments operation in PayCyclesApi.
 * @export
 * @interface PayCyclesApiGetBatchPaymentsRequest
 */
export type PayCyclesApiGetBatchPaymentsRequest = {
    
    /**
    * The Pay Group Id
    * @type {string}
    * @memberof PayCyclesApiGetBatchPayments
    */
    readonly payGroupId: string
    
    /**
    * The Pay cycle Id
    * @type {string}
    * @memberof PayCyclesApiGetBatchPayments
    */
    readonly payCycleId: string
    
    /**
    * The Pay Batch Id
    * @type {string}
    * @memberof PayCyclesApiGetBatchPayments
    */
    readonly payBatchId: string
    
    /**
    * Comma separated list of one or more payment Status you\'d like to filter on, allowed values are UnPaid, Paid.
    * @type {string}
    * @memberof PayCyclesApiGetBatchPayments
    */
    readonly status?: string
    
    /**
    * 
    * @type {number}
    * @memberof PayCyclesApiGetBatchPayments
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof PayCyclesApiGetBatchPayments
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getPayBatches operation in PayCyclesApi.
 * @export
 * @interface PayCyclesApiGetPayBatchesRequest
 */
export type PayCyclesApiGetPayBatchesRequest = {
    
    /**
    * The Pay Group Id
    * @type {string}
    * @memberof PayCyclesApiGetPayBatches
    */
    readonly payGroupId: string
    
    /**
    * The Pay cycle Id
    * @type {string}
    * @memberof PayCyclesApiGetPayBatches
    */
    readonly payCycleId: string
    
    /**
    * Comma separated list of one or more payment Status you\'d like to filter on, allowed values are UnPaid, Paid.
    * @type {string}
    * @memberof PayCyclesApiGetPayBatches
    */
    readonly status?: string
    
    /**
    * 
    * @type {number}
    * @memberof PayCyclesApiGetPayBatches
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof PayCyclesApiGetPayBatches
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getPayRegister operation in PayCyclesApi.
 * @export
 * @interface PayCyclesApiGetPayRegisterRequest
 */
export type PayCyclesApiGetPayRegisterRequest = {
    
    /**
    * The Pay Group Id
    * @type {string}
    * @memberof PayCyclesApiGetPayRegister
    */
    readonly payGroupId: string
    
    /**
    * The Pay cycle Id
    * @type {string}
    * @memberof PayCyclesApiGetPayRegister
    */
    readonly payCycleId: string
    
    /**
    * 
    * @type {number}
    * @memberof PayCyclesApiGetPayRegister
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof PayCyclesApiGetPayRegister
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updatePaymentsStatus operation in PayCyclesApi.
 * @export
 * @interface PayCyclesApiUpdatePaymentsStatusRequest
 */
export type PayCyclesApiUpdatePaymentsStatusRequest = {
    /**
    * The Pay Group Id
    * @type {string}
    * @memberof PayCyclesApiUpdatePaymentsStatus
    */
    readonly payGroupId: string
    /**
    * The Pay cycle Id
    * @type {string}
    * @memberof PayCyclesApiUpdatePaymentsStatus
    */
    readonly payCycleId: string
    /**
    * The Pay Batch Id
    * @type {string}
    * @memberof PayCyclesApiUpdatePaymentsStatus
    */
    readonly payBatchId: string
    /**
    * The Payment Transactions.
    * @type {Array<PaymentTransaction>}
    * @memberof PayCyclesApiUpdatePaymentsStatus
    */
    readonly requestBody?: Array<PaymentTransaction>
}

/**
 * PayCyclesApiGenerated - object-oriented interface
 * @export
 * @class PayCyclesApiGenerated
 * @extends {BaseAPI}
 */
export class PayCyclesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get all Pay Cycles
     * @param {PayCyclesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayCyclesApiGenerated
     */
    public getAll(requestParameters: PayCyclesApiGetAllRequest, options?: AxiosRequestConfig) {
        return PayCyclesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all payments for the specified pay group Id and pay cycle Id and pay batch Id / specified pay group id and pay cycle Id and pay batch Id and payment status filter
     * @summary Get all Batch Payments
     * @param {PayCyclesApiGetBatchPaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayCyclesApiGenerated
     */
    public getBatchPayments(requestParameters: PayCyclesApiGetBatchPaymentsRequest, options?: AxiosRequestConfig) {
        return PayCyclesApiFp(this.configuration).getBatchPayments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Pay Batches
     * @param {PayCyclesApiGetPayBatchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayCyclesApiGenerated
     */
    public getPayBatches(requestParameters: PayCyclesApiGetPayBatchesRequest, options?: AxiosRequestConfig) {
        return PayCyclesApiFp(this.configuration).getPayBatches(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Pay Register
     * @param {PayCyclesApiGetPayRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayCyclesApiGenerated
     */
    public getPayRegister(requestParameters: PayCyclesApiGetPayRegisterRequest, options?: AxiosRequestConfig) {
        return PayCyclesApiFp(this.configuration).getPayRegister(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the Payments status.It will allow only 100 bulk transactions from that particular batch.
     * @summary Update the Payments status
     * @param {PayCyclesApiUpdatePaymentsStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayCyclesApiGenerated
     */
    public updatePaymentsStatus(requestParameters: PayCyclesApiUpdatePaymentsStatusRequest, options?: AxiosRequestConfig) {
        return PayCyclesApiFp(this.configuration).updatePaymentsStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

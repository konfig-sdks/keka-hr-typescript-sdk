/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiLookupPagedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExpensePolicyApi - axios parameter creator
 * @export
 */
export const ExpensePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all expensepolicies
         * @summary Get all expensepolicies
         * @param {string} [expensepolicyIds] The expensepolicy ids.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllExpensePolicies: async (expensepolicyIds?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expensepolicies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (expensepolicyIds !== undefined) {
                localVarQueryParameter['expensepolicyIds'] = expensepolicyIds;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/expensepolicies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpensePolicyApi - functional programming interface
 * @export
 */
export const ExpensePolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpensePolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all expensepolicies
         * @summary Get all expensepolicies
         * @param {ExpensePolicyApiListAllExpensePoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllExpensePolicies(requestParameters: ExpensePolicyApiListAllExpensePoliciesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLookupPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllExpensePolicies(requestParameters.expensepolicyIds, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpensePolicyApi - factory interface
 * @export
 */
export const ExpensePolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpensePolicyApiFp(configuration)
    return {
        /**
         * Get all expensepolicies
         * @summary Get all expensepolicies
         * @param {ExpensePolicyApiListAllExpensePoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllExpensePolicies(requestParameters: ExpensePolicyApiListAllExpensePoliciesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApiLookupPagedResponse> {
            return localVarFp.listAllExpensePolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listAllExpensePolicies operation in ExpensePolicyApi.
 * @export
 * @interface ExpensePolicyApiListAllExpensePoliciesRequest
 */
export type ExpensePolicyApiListAllExpensePoliciesRequest = {
    
    /**
    * The expensepolicy ids.
    * @type {string}
    * @memberof ExpensePolicyApiListAllExpensePolicies
    */
    readonly expensepolicyIds?: string
    
    /**
    * 
    * @type {number}
    * @memberof ExpensePolicyApiListAllExpensePolicies
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof ExpensePolicyApiListAllExpensePolicies
    */
    readonly pageSize?: number
    
}

/**
 * ExpensePolicyApiGenerated - object-oriented interface
 * @export
 * @class ExpensePolicyApiGenerated
 * @extends {BaseAPI}
 */
export class ExpensePolicyApiGenerated extends BaseAPI {
    /**
     * Get all expensepolicies
     * @summary Get all expensepolicies
     * @param {ExpensePolicyApiListAllExpensePoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensePolicyApiGenerated
     */
    public listAllExpensePolicies(requestParameters: ExpensePolicyApiListAllExpensePoliciesRequest = {}, options?: AxiosRequestConfig) {
        return ExpensePolicyApiFp(this.configuration).listAllExpensePolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

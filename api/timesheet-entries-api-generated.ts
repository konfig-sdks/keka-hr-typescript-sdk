/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APITimesheetEntryPagedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimesheetEntriesApi - axios parameter creator
 * @export
 */
export const TimesheetEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project timesheet entries.
         * @param {string} [from] Date from records to retrieve. If not specified defaults to &#x60;to - 30&#x60; days.
         * @param {string} [to] Date to records can be retrieved. If not specified defaults to &#x60;today&#x60;.
         * @param {string} [employeeIds] Comma separated list of one or more Employee ids you\&#39;d like to filter on.
         * @param {string} [projectIds] Comma separated list of one or more project ids you\&#39;d like to filter on.
         * @param {string} [taskIds] Comma separated list of one or more task ids you\&#39;d like to filter on.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBetweenDates: async (from?: string, to?: string, employeeIds?: string, projectIds?: string, taskIds?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/psa/timeentries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (employeeIds !== undefined) {
                localVarQueryParameter['employeeIds'] = employeeIds;
            }

            if (projectIds !== undefined) {
                localVarQueryParameter['projectIds'] = projectIds;
            }

            if (taskIds !== undefined) {
                localVarQueryParameter['taskIds'] = taskIds;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/timeentries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimesheetEntriesApi - functional programming interface
 * @export
 */
export const TimesheetEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimesheetEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets the time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project timesheet entries.
         * @param {TimesheetEntriesApiGetBetweenDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBetweenDates(requestParameters: TimesheetEntriesApiGetBetweenDatesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APITimesheetEntryPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBetweenDates(requestParameters.from, requestParameters.to, requestParameters.employeeIds, requestParameters.projectIds, requestParameters.taskIds, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimesheetEntriesApi - factory interface
 * @export
 */
export const TimesheetEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimesheetEntriesApiFp(configuration)
    return {
        /**
         * Gets the time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project timesheet entries.
         * @param {TimesheetEntriesApiGetBetweenDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBetweenDates(requestParameters: TimesheetEntriesApiGetBetweenDatesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<APITimesheetEntryPagedResponse> {
            return localVarFp.getBetweenDates(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBetweenDates operation in TimesheetEntriesApi.
 * @export
 * @interface TimesheetEntriesApiGetBetweenDatesRequest
 */
export type TimesheetEntriesApiGetBetweenDatesRequest = {
    
    /**
    * Date from records to retrieve. If not specified defaults to `to - 30` days.
    * @type {string}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly from?: string
    
    /**
    * Date to records can be retrieved. If not specified defaults to `today`.
    * @type {string}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly to?: string
    
    /**
    * Comma separated list of one or more Employee ids you\'d like to filter on.
    * @type {string}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly employeeIds?: string
    
    /**
    * Comma separated list of one or more project ids you\'d like to filter on.
    * @type {string}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly projectIds?: string
    
    /**
    * Comma separated list of one or more task ids you\'d like to filter on.
    * @type {string}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly taskIds?: string
    
    /**
    * 
    * @type {number}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof TimesheetEntriesApiGetBetweenDates
    */
    readonly pageSize?: number
    
}

/**
 * TimesheetEntriesApiGenerated - object-oriented interface
 * @export
 * @class TimesheetEntriesApiGenerated
 * @extends {BaseAPI}
 */
export class TimesheetEntriesApiGenerated extends BaseAPI {
    /**
     * Gets the time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
     * @summary Get project timesheet entries.
     * @param {TimesheetEntriesApiGetBetweenDatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetEntriesApiGenerated
     */
    public getBetweenDates(requestParameters: TimesheetEntriesApiGetBetweenDatesRequest = {}, options?: AxiosRequestConfig) {
        return TimesheetEntriesApiFp(this.configuration).getBetweenDates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

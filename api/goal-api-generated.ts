/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIGoalPagedResponse } from '../models';
// @ts-ignore
import { APIUpdateGoalProgress } from '../models';
// @ts-ignore
import { BooleanResponse } from '../models';
// @ts-ignore
import { GoalStatus } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GoalApi - axios parameter creator
 * @export
 */
export const GoalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets all goals along with parent goal and child goals
         * @summary Gets goal list.
         * @param {string} [goalIds] Comma separated list of one or more Goal ids you\&#39;d like to filter on.
         * @param {string} [timeFrameIds] Comma separated list of one or more Time Frame ids you\&#39;d like to filter on.
         * @param {string} [employeeIds] Comma separated list of one or more Employee ids you\&#39;d like to filter on.
         * @param {string} [from] Date/time when goal time period will start, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified  defaults &#x60;to&#x60; - 60 days.
         * @param {string} [to] Date/time when goal time period will end, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified  defaults &#x60;from&#x60; + 60 days.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWithHierarchy: async (goalIds?: string, timeFrameIds?: string, employeeIds?: string, from?: string, to?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pms/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (goalIds !== undefined) {
                localVarQueryParameter['goalIds'] = goalIds;
            }

            if (timeFrameIds !== undefined) {
                localVarQueryParameter['timeFrameIds'] = timeFrameIds;
            }

            if (employeeIds !== undefined) {
                localVarQueryParameter['employeeIds'] = employeeIds;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pms/goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the goal progress
         * @summary Update goal progress
         * @param {string} goalId The goal identifier.
         * @param {APIUpdateGoalProgress} [aPIUpdateGoalProgress] The update goal progress view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgress: async (goalId: string, aPIUpdateGoalProgress?: APIUpdateGoalProgress, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('updateProgress', 'goalId', goalId)
            const localVarPath = `/pms/goals/{goalId}/progress`
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: aPIUpdateGoalProgress,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pms/goals/{goalId}/progress',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(aPIUpdateGoalProgress, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalApi - functional programming interface
 * @export
 */
export const GoalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets all goals along with parent goal and child goals
         * @summary Gets goal list.
         * @param {GoalApiListWithHierarchyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWithHierarchy(requestParameters: GoalApiListWithHierarchyRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIGoalPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWithHierarchy(requestParameters.goalIds, requestParameters.timeFrameIds, requestParameters.employeeIds, requestParameters.from, requestParameters.to, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the goal progress
         * @summary Update goal progress
         * @param {GoalApiUpdateProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProgress(requestParameters: GoalApiUpdateProgressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const aPIUpdateGoalProgress: APIUpdateGoalProgress = {
                currentValue: requestParameters.currentValue,
                status: requestParameters.status,
                updatedBy: requestParameters.updatedBy,
                note: requestParameters.note
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProgress(requestParameters.goalId, aPIUpdateGoalProgress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalApi - factory interface
 * @export
 */
export const GoalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalApiFp(configuration)
    return {
        /**
         * Gets all goals along with parent goal and child goals
         * @summary Gets goal list.
         * @param {GoalApiListWithHierarchyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWithHierarchy(requestParameters: GoalApiListWithHierarchyRequest = {}, options?: AxiosRequestConfig): AxiosPromise<APIGoalPagedResponse> {
            return localVarFp.listWithHierarchy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the goal progress
         * @summary Update goal progress
         * @param {GoalApiUpdateProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgress(requestParameters: GoalApiUpdateProgressRequest, options?: AxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.updateProgress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listWithHierarchy operation in GoalApi.
 * @export
 * @interface GoalApiListWithHierarchyRequest
 */
export type GoalApiListWithHierarchyRequest = {
    
    /**
    * Comma separated list of one or more Goal ids you\'d like to filter on.
    * @type {string}
    * @memberof GoalApiListWithHierarchy
    */
    readonly goalIds?: string
    
    /**
    * Comma separated list of one or more Time Frame ids you\'d like to filter on.
    * @type {string}
    * @memberof GoalApiListWithHierarchy
    */
    readonly timeFrameIds?: string
    
    /**
    * Comma separated list of one or more Employee ids you\'d like to filter on.
    * @type {string}
    * @memberof GoalApiListWithHierarchy
    */
    readonly employeeIds?: string
    
    /**
    * Date/time when goal time period will start, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified  defaults `to` - 60 days.
    * @type {string}
    * @memberof GoalApiListWithHierarchy
    */
    readonly from?: string
    
    /**
    * Date/time when goal time period will end, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh). If not specified  defaults `from` + 60 days.
    * @type {string}
    * @memberof GoalApiListWithHierarchy
    */
    readonly to?: string
    
    /**
    * 
    * @type {number}
    * @memberof GoalApiListWithHierarchy
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof GoalApiListWithHierarchy
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateProgress operation in GoalApi.
 * @export
 * @interface GoalApiUpdateProgressRequest
 */
export type GoalApiUpdateProgressRequest = {
    
    /**
    * The goal identifier.
    * @type {string}
    * @memberof GoalApiUpdateProgress
    */
    readonly goalId: string
    
} & APIUpdateGoalProgress

/**
 * GoalApiGenerated - object-oriented interface
 * @export
 * @class GoalApiGenerated
 * @extends {BaseAPI}
 */
export class GoalApiGenerated extends BaseAPI {
    /**
     * Gets all goals along with parent goal and child goals
     * @summary Gets goal list.
     * @param {GoalApiListWithHierarchyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalApiGenerated
     */
    public listWithHierarchy(requestParameters: GoalApiListWithHierarchyRequest = {}, options?: AxiosRequestConfig) {
        return GoalApiFp(this.configuration).listWithHierarchy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the goal progress
     * @summary Update goal progress
     * @param {GoalApiUpdateProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalApiGenerated
     */
    public updateProgress(requestParameters: GoalApiUpdateProgressRequest, options?: AxiosRequestConfig) {
        return GoalApiFp(this.configuration).updateProgress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

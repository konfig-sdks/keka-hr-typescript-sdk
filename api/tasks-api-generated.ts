/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIProjectTaskPagedResponse } from '../models';
// @ts-ignore
import { APITimesheetEntryPagedResponse } from '../models';
// @ts-ignore
import { BooleanResponse } from '../models';
// @ts-ignore
import { ProjectTask } from '../models';
// @ts-ignore
import { StringResponse } from '../models';
// @ts-ignore
import { TaskBillingType } from '../models';
// @ts-ignore
import { UpdateProjectTask } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create project task and returns created task identifier.
         * @summary Create a task
         * @param {string} projectId The project identifier.
         * @param {ProjectTask} [projectTask] The project task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskIdentifier: async (projectId: string, projectTask?: ProjectTask, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createTaskIdentifier', 'projectId', projectId)
            const localVarPath = `/psa/projects/{projectId}/tasks`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectTask,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{projectId}/tasks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectTask, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the project tasks.
         * @summary Get project tasks.
         * @param {string} projectId The project identifier.
         * @param {string} [lastModified] Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ssÂ±hh:mm).
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (projectId: string, lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAll', 'projectId', projectId)
            const localVarPath = `/psa/projects/{projectId}/tasks`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{projectId}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the project task time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project task time entries.
         * @param {string} projectId The project identifier.
         * @param {string} taskId The task identifier.
         * @param {string} [from] Date from records to retrieve. If not specified defaults to &#x60;to - 30&#x60; days.
         * @param {string} [to] Date to records can be retrieved. If not specified defaults to &#x60;today&#x60;.
         * @param {string} [employeeIds] Comma separated list of one or more Employee ids you\&#39;d like to filter on.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeEntriesBetweenDates: async (projectId: string, taskId: string, from?: string, to?: string, employeeIds?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listTimeEntriesBetweenDates', 'projectId', projectId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('listTimeEntriesBetweenDates', 'taskId', taskId)
            const localVarPath = `/psa/projects/{projectId}/tasks/{taskId}/timeentries`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-taskId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (employeeIds !== undefined) {
                localVarQueryParameter['employeeIds'] = employeeIds;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{projectId}/tasks/{taskId}/timeentries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update project task.
         * @summary Update a task
         * @param {string} projectId The project identifier.
         * @param {string} taskId The task identifier.
         * @param {UpdateProjectTask} [updateProjectTask] The project task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (projectId: string, taskId: string, updateProjectTask?: UpdateProjectTask, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateTask', 'projectId', projectId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateTask', 'taskId', taskId)
            const localVarPath = `/psa/projects/{projectId}/tasks/{taskId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-taskId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateProjectTask,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{projectId}/tasks/{taskId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectTask, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create project task and returns created task identifier.
         * @summary Create a task
         * @param {TasksApiCreateTaskIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskIdentifier(requestParameters: TasksApiCreateTaskIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponse>> {
            const projectTask: ProjectTask = {
                description: requestParameters.requestBody.description,
                projectId: requestParameters.requestBody.projectId,
                name: requestParameters.requestBody.name,
                taskBillingType: requestParameters.requestBody.taskBillingType,
                assignedTo: requestParameters.requestBody.assignedTo,
                startDate: requestParameters.requestBody.startDate,
                endDate: requestParameters.requestBody.endDate,
                estimatedHours: requestParameters.requestBody.estimatedHours,
                phaseId: requestParameters.requestBody.phaseId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskIdentifier(requestParameters.projectId, projectTask, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the project tasks.
         * @summary Get project tasks.
         * @param {TasksApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: TasksApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIProjectTaskPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.projectId, requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the project task time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project task time entries.
         * @param {TasksApiListTimeEntriesBetweenDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeEntriesBetweenDates(requestParameters: TasksApiListTimeEntriesBetweenDatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APITimesheetEntryPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeEntriesBetweenDates(requestParameters.projectId, requestParameters.taskId, requestParameters.from, requestParameters.to, requestParameters.employeeIds, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update project task.
         * @summary Update a task
         * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(requestParameters: TasksApiUpdateTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const updateProjectTask: UpdateProjectTask = {
                description: requestParameters.description,
                name: requestParameters.name,
                taskBillingType: requestParameters.taskBillingType,
                assignedTo: requestParameters.assignedTo,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                estimatedHours: requestParameters.estimatedHours,
                phaseId: requestParameters.phaseId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(requestParameters.projectId, requestParameters.taskId, updateProjectTask, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Create project task and returns created task identifier.
         * @summary Create a task
         * @param {TasksApiCreateTaskIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskIdentifier(requestParameters: TasksApiCreateTaskIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<StringResponse> {
            return localVarFp.createTaskIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the project tasks.
         * @summary Get project tasks.
         * @param {TasksApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: TasksApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<APIProjectTaskPagedResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the project task time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project task time entries.
         * @param {TasksApiListTimeEntriesBetweenDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeEntriesBetweenDates(requestParameters: TasksApiListTimeEntriesBetweenDatesRequest, options?: AxiosRequestConfig): AxiosPromise<APITimesheetEntryPagedResponse> {
            return localVarFp.listTimeEntriesBetweenDates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update project task.
         * @summary Update a task
         * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(requestParameters: TasksApiUpdateTaskRequest, options?: AxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.updateTask(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTaskIdentifier operation in TasksApi.
 * @export
 * @interface TasksApiCreateTaskIdentifierRequest
 */
export type TasksApiCreateTaskIdentifierRequest = {
    /**
    * The project identifier.
    * @type {string}
    * @memberof TasksApiCreateTaskIdentifier
    */
    readonly projectId: string
    /**
    * The project task.
    * @type {ProjectTask}
    * @memberof TasksApiCreateTaskIdentifier
    */
    readonly requestBody?: ProjectTask
}

/**
 * Request parameters for getAll operation in TasksApi.
 * @export
 * @interface TasksApiGetAllRequest
 */
export type TasksApiGetAllRequest = {
    
    /**
    * The project identifier.
    * @type {string}
    * @memberof TasksApiGetAll
    */
    readonly projectId: string
    
    /**
    * Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ssÂ±hh:mm).
    * @type {string}
    * @memberof TasksApiGetAll
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof TasksApiGetAll
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof TasksApiGetAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for listTimeEntriesBetweenDates operation in TasksApi.
 * @export
 * @interface TasksApiListTimeEntriesBetweenDatesRequest
 */
export type TasksApiListTimeEntriesBetweenDatesRequest = {
    
    /**
    * The project identifier.
    * @type {string}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly projectId: string
    
    /**
    * The task identifier.
    * @type {string}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly taskId: string
    
    /**
    * Date from records to retrieve. If not specified defaults to `to - 30` days.
    * @type {string}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly from?: string
    
    /**
    * Date to records can be retrieved. If not specified defaults to `today`.
    * @type {string}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly to?: string
    
    /**
    * Comma separated list of one or more Employee ids you\'d like to filter on.
    * @type {string}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly employeeIds?: string
    
    /**
    * 
    * @type {number}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof TasksApiListTimeEntriesBetweenDates
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateTask operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskRequest
 */
export type TasksApiUpdateTaskRequest = {
    
    /**
    * The project identifier.
    * @type {string}
    * @memberof TasksApiUpdateTask
    */
    readonly projectId: string
    
    /**
    * The task identifier.
    * @type {string}
    * @memberof TasksApiUpdateTask
    */
    readonly taskId: string
    
} & UpdateProjectTask

/**
 * TasksApiGenerated - object-oriented interface
 * @export
 * @class TasksApiGenerated
 * @extends {BaseAPI}
 */
export class TasksApiGenerated extends BaseAPI {
    /**
     * Create project task and returns created task identifier.
     * @summary Create a task
     * @param {TasksApiCreateTaskIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public createTaskIdentifier(requestParameters: TasksApiCreateTaskIdentifierRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).createTaskIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the project tasks.
     * @summary Get project tasks.
     * @param {TasksApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getAll(requestParameters: TasksApiGetAllRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the project task time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
     * @summary Get project task time entries.
     * @param {TasksApiListTimeEntriesBetweenDatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public listTimeEntriesBetweenDates(requestParameters: TasksApiListTimeEntriesBetweenDatesRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).listTimeEntriesBetweenDates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update project task.
     * @summary Update a task
     * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public updateTask(requestParameters: TasksApiUpdateTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Requisition

Here's our story,

It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!

Thus emerged Keka!

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIProjectAllocationPagedResponse } from '../models';
// @ts-ignore
import { APIProjectPagedResponse } from '../models';
// @ts-ignore
import { APIProjectResponse } from '../models';
// @ts-ignore
import { APITimesheetEntryPagedResponse } from '../models';
// @ts-ignore
import { BooleanResponse } from '../models';
// @ts-ignore
import { Project } from '../models';
// @ts-ignore
import { ProjectStatus } from '../models';
// @ts-ignore
import { StringResponse } from '../models';
// @ts-ignore
import { UpdateProject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Project and returns created project identifier.
         * @summary Create a Project
         * @param {Project} [project] The project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectIdentifier: async (project?: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/psa/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: project,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all projects.
         * @summary Get all projects.
         * @param {string} [clientIds] Comma separated list of one or more employee ids you\&#39;d like to filter on.
         * @param {string} [lastModified] Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ssÂ±hh:mm).
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (clientIds?: string, lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/psa/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (clientIds !== undefined) {
                localVarQueryParameter['clientIds'] = clientIds;
            }

            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified project allocations based on identifier.
         * @summary Get a project allocations
         * @param {string} id The identifier.
         * @param {string} [lastModified] The last modified.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllocations: async (id: string, lastModified?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAllocations', 'id', id)
            const localVarPath = `/psa/projects/{id}/allocations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (lastModified !== undefined) {
                localVarQueryParameter['lastModified'] = (lastModified as any instanceof Date) ?
                    (lastModified as any).toISOString() :
                    lastModified;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{id}/allocations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified project based on identifier.
         * @summary Get a project
         * @param {string} id The identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/psa/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the project time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project timesheet entries.
         * @param {string} id The project identifier.
         * @param {string} [from] Date from records to retrieve. If not specified defaults to &#x60;to - 30&#x60; days.
         * @param {string} [to] Date to records can be retrieved. If not specified defaults to &#x60;today&#x60;.
         * @param {string} [employeeIds] Comma separated list of one or more Employee ids you\&#39;d like to filter on.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] Represents how many results you\&#39;d like to retrieve per request (page). Default is 100. Max is 200
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimesheetEntriesBetweenDates: async (id: string, from?: string, to?: string, employeeIds?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTimesheetEntriesBetweenDates', 'id', id)
            const localVarPath = `/psa/projects/{id}/timeentries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (employeeIds !== undefined) {
                localVarQueryParameter['employeeIds'] = employeeIds;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{id}/timeentries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Project Details.
         * @summary Update a Project
         * @param {string} id The identifier.
         * @param {UpdateProject} [updateProject] The update project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (id: string, updateProject?: UpdateProject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDetails', 'id', id)
            const localVarPath = `/psa/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateProject,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/psa/projects/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateProject, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an Project and returns created project identifier.
         * @summary Create a Project
         * @param {ProjectsApiCreateProjectIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectIdentifier(requestParameters: ProjectsApiCreateProjectIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponse>> {
            const project: Project = {
                description: requestParameters.description,
                clientId: requestParameters.clientId,
                name: requestParameters.name,
                code: requestParameters.code,
                status: requestParameters.status,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                isBillable: requestParameters.isBillable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectIdentifier(project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all projects.
         * @summary Get all projects.
         * @param {ProjectsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: ProjectsApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIProjectPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.clientIds, requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified project allocations based on identifier.
         * @summary Get a project allocations
         * @param {ProjectsApiGetAllocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllocations(requestParameters: ProjectsApiGetAllocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIProjectAllocationPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllocations(requestParameters.id, requestParameters.lastModified, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified project based on identifier.
         * @summary Get a project
         * @param {ProjectsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ProjectsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the project time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project timesheet entries.
         * @param {ProjectsApiGetTimesheetEntriesBetweenDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimesheetEntriesBetweenDates(requestParameters: ProjectsApiGetTimesheetEntriesBetweenDatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APITimesheetEntryPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimesheetEntriesBetweenDates(requestParameters.id, requestParameters.from, requestParameters.to, requestParameters.employeeIds, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Project Details.
         * @summary Update a Project
         * @param {ProjectsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: ProjectsApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const updateProject: UpdateProject = {
                description: requestParameters.description,
                name: requestParameters.name,
                code: requestParameters.code,
                status: requestParameters.status,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                isBillable: requestParameters.isBillable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.id, updateProject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * Create an Project and returns created project identifier.
         * @summary Create a Project
         * @param {ProjectsApiCreateProjectIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectIdentifier(requestParameters: ProjectsApiCreateProjectIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<StringResponse> {
            return localVarFp.createProjectIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all projects.
         * @summary Get all projects.
         * @param {ProjectsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: ProjectsApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<APIProjectPagedResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified project allocations based on identifier.
         * @summary Get a project allocations
         * @param {ProjectsApiGetAllocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllocations(requestParameters: ProjectsApiGetAllocationsRequest, options?: AxiosRequestConfig): AxiosPromise<APIProjectAllocationPagedResponse> {
            return localVarFp.getAllocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified project based on identifier.
         * @summary Get a project
         * @param {ProjectsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ProjectsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<APIProjectResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the project time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
         * @summary Get project timesheet entries.
         * @param {ProjectsApiGetTimesheetEntriesBetweenDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimesheetEntriesBetweenDates(requestParameters: ProjectsApiGetTimesheetEntriesBetweenDatesRequest, options?: AxiosRequestConfig): AxiosPromise<APITimesheetEntryPagedResponse> {
            return localVarFp.getTimesheetEntriesBetweenDates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Project Details.
         * @summary Update a Project
         * @param {ProjectsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: ProjectsApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProjectIdentifier operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateProjectIdentifierRequest
 */
export type ProjectsApiCreateProjectIdentifierRequest = {
    
} & Project

/**
 * Request parameters for getAll operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetAllRequest
 */
export type ProjectsApiGetAllRequest = {
    
    /**
    * Comma separated list of one or more employee ids you\'d like to filter on.
    * @type {string}
    * @memberof ProjectsApiGetAll
    */
    readonly clientIds?: string
    
    /**
    * Date/time when this time off request was last modified, in ISO 8601 format (YYYY-MM-DDThh:mm:ssÂ±hh:mm).
    * @type {string}
    * @memberof ProjectsApiGetAll
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof ProjectsApiGetAll
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof ProjectsApiGetAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getAllocations operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetAllocationsRequest
 */
export type ProjectsApiGetAllocationsRequest = {
    
    /**
    * The identifier.
    * @type {string}
    * @memberof ProjectsApiGetAllocations
    */
    readonly id: string
    
    /**
    * The last modified.
    * @type {string}
    * @memberof ProjectsApiGetAllocations
    */
    readonly lastModified?: string
    
    /**
    * 
    * @type {number}
    * @memberof ProjectsApiGetAllocations
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof ProjectsApiGetAllocations
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getById operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetByIdRequest
 */
export type ProjectsApiGetByIdRequest = {
    
    /**
    * The identifier.
    * @type {string}
    * @memberof ProjectsApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getTimesheetEntriesBetweenDates operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetTimesheetEntriesBetweenDatesRequest
 */
export type ProjectsApiGetTimesheetEntriesBetweenDatesRequest = {
    
    /**
    * The project identifier.
    * @type {string}
    * @memberof ProjectsApiGetTimesheetEntriesBetweenDates
    */
    readonly id: string
    
    /**
    * Date from records to retrieve. If not specified defaults to `to - 30` days.
    * @type {string}
    * @memberof ProjectsApiGetTimesheetEntriesBetweenDates
    */
    readonly from?: string
    
    /**
    * Date to records can be retrieved. If not specified defaults to `today`.
    * @type {string}
    * @memberof ProjectsApiGetTimesheetEntriesBetweenDates
    */
    readonly to?: string
    
    /**
    * Comma separated list of one or more Employee ids you\'d like to filter on.
    * @type {string}
    * @memberof ProjectsApiGetTimesheetEntriesBetweenDates
    */
    readonly employeeIds?: string
    
    /**
    * 
    * @type {number}
    * @memberof ProjectsApiGetTimesheetEntriesBetweenDates
    */
    readonly pageNumber?: number
    
    /**
    * Represents how many results you\'d like to retrieve per request (page). Default is 100. Max is 200
    * @type {number}
    * @memberof ProjectsApiGetTimesheetEntriesBetweenDates
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateDetails operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateDetailsRequest
 */
export type ProjectsApiUpdateDetailsRequest = {
    
    /**
    * The identifier.
    * @type {string}
    * @memberof ProjectsApiUpdateDetails
    */
    readonly id: string
    
} & UpdateProject

/**
 * ProjectsApiGenerated - object-oriented interface
 * @export
 * @class ProjectsApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectsApiGenerated extends BaseAPI {
    /**
     * Create an Project and returns created project identifier.
     * @summary Create a Project
     * @param {ProjectsApiCreateProjectIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public createProjectIdentifier(requestParameters: ProjectsApiCreateProjectIdentifierRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProjectIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all projects.
     * @summary Get all projects.
     * @param {ProjectsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getAll(requestParameters: ProjectsApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified project allocations based on identifier.
     * @summary Get a project allocations
     * @param {ProjectsApiGetAllocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getAllocations(requestParameters: ProjectsApiGetAllocationsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getAllocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified project based on identifier.
     * @summary Get a project
     * @param {ProjectsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getById(requestParameters: ProjectsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the project time entries between selected from and to date range.If both `from` and `to` are not specified, last 30 days records are returned.From `date` should be before `to` date.The difference between `from` and `to` date cannot be more than **90** days.
     * @summary Get project timesheet entries.
     * @param {ProjectsApiGetTimesheetEntriesBetweenDatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public getTimesheetEntriesBetweenDates(requestParameters: ProjectsApiGetTimesheetEntriesBetweenDatesRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getTimesheetEntriesBetweenDates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Project Details.
     * @summary Update a Project
     * @param {ProjectsApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiGenerated
     */
    public updateDetails(requestParameters: ProjectsApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
